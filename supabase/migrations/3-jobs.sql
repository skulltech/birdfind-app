-- Long running background jobs and rate limit information

create table if not exists twitter_api_rate_limit (
  user_twitter_id bigint references twitter_profile not null,
  endpoint text not null check (endpoint in (
    'lookup-followers', 'lookup-following', 'lookup-blocking', 'lookup-muting',
    'add-list-member', 'remove-list-member',
    'add-follow', 'remove-follow', 'add-block', 'remove-block', 'add-mute', 'remove-mute'
  )),
  created_at timestamp with time zone default now() not null,
  resets_at timestamp with time zone not null,

  primary key (user_twitter_id, endpoint)
);

alter table twitter_api_rate_limit enable row level security;

create policy "Users can view their own rate limits."
  on twitter_api_rate_limit for select
  to authenticated
  using ( auth.uid() in (
      select user_profile.id from user_profile
      where user_profile.twitter_id = twitter_api_rate_limit.user_twitter_id
  ));


-- Lookup relation jobs

create table if not exists lookup_relation_job (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone default now() not null,

    -- Actual inputs
    user_id uuid references auth.users not null,
    target_id bigint references twitter_profile not null,
    relation text not null check (relation in ('followers', 'following', 'blocking', 'muting')),
    priority integer not null,

    -- To track progress
    paused boolean default false not null,
    finished boolean default false not null,
    deleted boolean default false not null,
    pagination_token text,
    updated_count integer default 0 not null
);

alter publication supabase_realtime add table lookup_relation_job;

alter table lookup_relation_job enable row level security;

create policy "Users can insert their own lookup relation jobs."
  on lookup_relation_job for insert
  with check ( auth.uid() = user_id );

create policy "Users can view their own lookup relation jobs."
  on lookup_relation_job for select
  to authenticated
  using ( auth.uid() = user_id );

create policy "Users can update their own lookup relation jobs."
  on lookup_relation_job for update
  to authenticated
  using ( auth.uid() = user_id );


-- Manage list members jobs

create table if not exists manage_list_members_job (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone default now() not null,

    -- Actual inputs
    user_id uuid references auth.users not null,
    add boolean not null,
    member_ids bigint[] not null,
    list_id bigint references twitter_list not null,
    priority integer not null,

    -- To track progress
    paused boolean default false not null,
    finished boolean generated always as (member_ids_done @> member_ids) stored,
    deleted boolean default false not null,
    member_ids_done bigint[] default array[]::bigint[]
);

alter publication supabase_realtime add table manage_list_members_job;

alter table manage_list_members_job enable row level security;

create policy "Users can insert their own manage list members jobs."
  on manage_list_members_job for insert
  to authenticated
  with check ( auth.uid() = user_id );

create policy "Users can view their own manage list members jobs."
  on manage_list_members_job for select
  to authenticated
  using ( auth.uid() = user_id );

create policy "Users can update their own manage list members jobs."
  on manage_list_members_job for update
  to authenticated
  using ( auth.uid() = user_id );


-- Manage relation jobs

create table if not exists manage_relation_job (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone default now() not null,

    -- Actual inputs
    user_id uuid references auth.users not null,
    target_ids bigint[] not null,
    relation text check (relation in ('follow', 'mute', 'block')),
    add boolean not null,
    priority integer not null,

    -- To track progress
    paused boolean default false not null,
    finished boolean generated always as (target_ids_done @> target_ids) stored,
    deleted boolean default false not null,
    target_ids_done bigint[] default array[]::bigint[]
);

alter publication supabase_realtime add table manage_relation_job;

alter table manage_relation_job enable row level security;

create policy "Users can insert their own manage relation jobs."
  on manage_relation_job for insert
  to authenticated
  with check ( auth.uid() = user_id );

create policy "Users can view their own manage relation jobs."
  on manage_relation_job for select
  to authenticated
  using ( auth.uid() = user_id );

create policy "Users can update their own manage relation jobs."
  on manage_relation_job for update
  to authenticated
  using ( auth.uid() = user_id );


-- Function to get the next lookup-relation jobs to execute

create or replace function get_lookup_relation_jobs_to_add(active_jobs bigint[], failed_jobs bigint[])
  returns setof lookup_relation_job as $$

select
  distinct on (lookup_relation_job.user_id, lookup_relation_job.relation)
  lookup_relation_job.*
from lookup_relation_job
  left join user_profile on user_profile.id = lookup_relation_job.user_id
  left join twitter_api_rate_limit on 
    twitter_api_rate_limit.user_twitter_id = user_profile.twitter_id and
    twitter_api_rate_limit.endpoint = 'lookup-' || lookup_relation_job.relation

where lookup_relation_job.finished = false
  and lookup_relation_job.paused = false
  and lookup_relation_job.deleted = false
  and not (lookup_relation_job.id = any(failed_jobs))
  and (twitter_api_rate_limit.resets_at is null or twitter_api_rate_limit.resets_at < now())
  and lookup_relation_job.user_id not in (
    select user_id from lookup_relation_job where id = any(active_jobs)
  )
order by lookup_relation_job.user_id, lookup_relation_job.relation, lookup_relation_job.priority desc
;

$$ language sql;


-- Function to get the next manage-relation jobs to execute

create or replace function get_manage_relation_jobs_to_add(active_jobs bigint[], failed_jobs bigint[])
  returns setof manage_relation_job as $$

select
  distinct on (manage_relation_job.user_id, manage_relation_job.relation, manage_relation_job.add)
  manage_relation_job.*
from manage_relation_job
  left join user_profile on user_profile.id = manage_relation_job.user_id
  left join twitter_api_rate_limit on 
    twitter_api_rate_limit.user_twitter_id = user_profile.twitter_id and
    twitter_api_rate_limit.endpoint =
      case manage_relation_job.add when true then 'add' else 'remove' end || '-' || manage_relation_job.relation

where manage_relation_job.finished = false
  and manage_relation_job.paused = false
  and manage_relation_job.deleted = false
  and not (manage_relation_job.id = any(failed_jobs))
  and (twitter_api_rate_limit.resets_at is null or twitter_api_rate_limit.resets_at < now())
  and manage_relation_job.user_id not in (
    select user_id from manage_relation_job where id = any(active_jobs)
  )
order by manage_relation_job.user_id, manage_relation_job.relation, manage_relation_job.add, manage_relation_job.priority desc
;

$$ language sql;


-- Function to get the next manage-list-members jobs to execute

create or replace function get_manage_list_members_jobs_to_add(active_jobs bigint[], failed_jobs bigint[])
  returns setof manage_list_members_job as $$

select
  distinct on (manage_list_members_job.user_id, manage_list_members_job.add)
  manage_list_members_job.*
from manage_list_members_job
  left join user_profile on user_profile.id = manage_list_members_job.user_id
  left join twitter_api_rate_limit on 
    twitter_api_rate_limit.user_twitter_id = user_profile.twitter_id and
    twitter_api_rate_limit.endpoint = 
      case manage_list_members_job.add when true then 'add' else 'remove' end || '-list-member'

where manage_list_members_job.finished = false
  and manage_list_members_job.paused = false
  and manage_list_members_job.deleted = false
  and (twitter_api_rate_limit.resets_at is null or twitter_api_rate_limit.resets_at < now())
  and not (manage_list_members_job.id = any(failed_jobs))
  and manage_list_members_job.user_id not in (
    select user_id from manage_list_members_job where id = any(active_jobs)
  )
order by manage_list_members_job.user_id, manage_list_members_job.add, manage_list_members_job.priority desc
;

$$ language sql;
