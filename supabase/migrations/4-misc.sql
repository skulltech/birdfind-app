-- User events

create table if not exists user_event (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,

    user_id uuid references auth.users not null,

    type text not null check (type in 
      ('search-filters', 'manage-relation', 'manage-list-member', 'prompt-to-filters')),
    data jsonb
);

alter table user_event enable row level security;

create policy "Users can insert events for themselves."
  on user_event for insert
  with check ( auth.uid() = user_id );


-- Search twitter profiles using filters

create or replace function search_twitter_profiles
    (follower_of text[] default null, followed_by text[] default null, muted_by text[] default null, blocked_by text[] default null)
    returns setof twitter_profile as $$
begin
return query select * from twitter_profile where
    ((follower_of is null) or
      id in (select source_id from twitter_follow group by source_id
        having array_agg(target_id) @> array(
          select id from twitter_profile where username = any(follower_of)
        )))
    and
    ((followed_by is null) or
      id in (select target_id from twitter_follow group by target_id
        having array_agg(source_id) @> array(
          select id from twitter_profile where username = any(followed_by)
        )))
    and
    ((muted_by is null) or
      id in (select target_id from twitter_mute group by target_id
        having array_agg(source_id) @> array(
          select id from twitter_profile where username = any(muted_by)
        )))
    and
    ((blocked_by is null) or
      id in (select target_id from twitter_block group by target_id
        having array_agg(source_id) @> array(
          select id from twitter_profile where username = any(blocked_by)
        )));
end
$$ language plpgsql;


-- Helper function to get relevant user details at once

create or replace function get_user_details(id uuid default null)
  returns table(
    id uuid,
    email text,
    twitter_id bigint,
    twitter_oauth_token jsonb,
    twitter_username text,
    twitter_profile_image_url text
  )
  as $$

select user_profile.id, user_profile.email, user_profile.twitter_id, user_profile.twitter_oauth_token, twitter_profile.username as twitter_username, twitter_profile.profile_image_url as twitter_profile_image_url
  from user_profile 
    left join twitter_profile on user_profile.twitter_id = twitter_profile.id
  where (get_user_details.id is null or user_profile.id = get_user_details.id)
;

$$ language sql;
