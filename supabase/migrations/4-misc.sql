-- User events

create table if not exists user_event (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,

    user_id uuid references auth.users not null,

    type text not null check (type in (
      'search-filters', 'manage-relation', 'manage-list-member', 'prompt-to-filters'
    )),
    data jsonb
);

alter table user_event enable row level security;

create policy "Users can insert their own events."
  on user_event for insert
  to authenticated
  with check ( auth.uid() = user_id );


-- Search twitter profiles using filters

create or replace function search_twitter_profiles (
  -- Arguments
  reference_user bigint default null,
  follower_of text[] default null,
  followed_by text[] default null,
  muted_by text[] default null,
  blocked_by text[] default null
  ) returns table (
    -- Twitter profile columns
    id bigint,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    followers_updated_at timestamp with time zone,
    following_updated_at timestamp with time zone,
    muting_updated_at timestamp with time zone,
    blocking_updated_at timestamp with time zone,
    lists_owned_updated_at timestamp with time zone,
    username text,
    name text,
    user_created_at timestamp with time zone,
    description text,
    entities jsonb,
    location text,
    pinned_tweet_id bigint,
    profile_image_url text,
    protected boolean,
    followers_count integer,
    following_count integer,
    tweet_count integer,
    listed_count integer,
    url text,
    verified boolean,
    withheld jsonb,
    -- Relation info
    is_following boolean,
    is_follower boolean,
    is_blocked boolean,
    is_muted boolean
  ) as $$
begin
return query

  select
    twitter_profile.*,
    twitter_following.source_id is not null as is_following,
    twitter_follower.source_id is not null as is_follower,
    twitter_block.source_id is not null as is_blocked,
    twitter_mute.source_id is not null as is_muted

  from twitter_profile
    left join twitter_follow as twitter_following on twitter_following.source_id = reference_user and twitter_following.target_id = twitter_profile.id
    left join twitter_follow as twitter_follower on twitter_follower.source_id = twitter_profile.id and twitter_follower.target_id = reference_user
    left join twitter_block on twitter_block.source_id = reference_user and twitter_block.target_id = twitter_profile.id
    left join twitter_mute on twitter_mute.source_id = reference_user and twitter_mute.target_id = twitter_profile.id

  where
    ((follower_of is null) or
      twitter_profile.id in (select source_id from twitter_follow group by source_id
        having array_agg(target_id) @> array(
          select twitter_profile.id from twitter_profile where twitter_profile.username = any(follower_of)
        )))
    and
    ((followed_by is null) or
      twitter_profile.id in (select target_id from twitter_follow group by target_id
        having array_agg(source_id) @> array(
          select twitter_profile.id from twitter_profile where twitter_profile.username = any(followed_by)
        )))
    and
    ((muted_by is null) or
      twitter_profile.id in (select target_id from twitter_mute group by target_id
        having array_agg(source_id) @> array(
          select twitter_profile.id from twitter_profile where twitter_profile.username = any(muted_by)
        )))
    and
    ((blocked_by is null) or
      twitter_profile.id in (select target_id from twitter_block group by target_id
        having array_agg(source_id) @> array(
          select twitter_profile.id from twitter_profile where twitter_profile.username = any(blocked_by)
        )));

end
$$ language plpgsql;

-- Helper function to get relevant user details at once

create or replace function get_user_details(id uuid default null)
  returns table(
    id uuid,
    email text,
    twitter_id bigint,
    twitter_oauth_token jsonb,
    twitter_username text,
    twitter_name text,
    twitter_profile_image_url text
  )
  as $$

select user_profile.id, user_profile.email, user_profile.twitter_id, user_profile.twitter_oauth_token, twitter_profile.username as twitter_username, twitter_profile.name as twitter_name, twitter_profile.profile_image_url as twitter_profile_image_url
  from user_profile 
    left join twitter_profile on user_profile.twitter_id = twitter_profile.id
  where (get_user_details.id is null or user_profile.id = get_user_details.id)
;

$$ language sql;
